def train_mnist_conv():
    mnist = tf.keras.datasets.mnist
    (training_images, training_labels), (test_images, test_labels) = mnist.load_data(path=path)
    training_images=training_images/255.0
    training_images=training_images.reshape(60000,28,28,1)
    test_images=test_images/255.0
 
    model = tf.keras.models.Sequential([
            tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.relu,input_shape=(28,28,1)),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Conv2D(64,(3,3),activation=tf.nn.relu),
            tf.keras.layers.MaxPooling2D(2,2),
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(units=128,activation=tf.nn.relu),
            tf.keras.layers.Dense(units=10,activation=tf.nn.softmax)
    ])
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    history = model.fit(
                        training_images,training_labels,epochs=5
    )
    print(model.summary())
    print(model.predict(training_images[:1]),training_labels[:1])
    return history.epoch, history.history['acc'][-1]

